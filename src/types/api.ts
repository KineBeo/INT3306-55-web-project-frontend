/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all users */
        get: operations["UserController_findAll"];
        put?: never;
        /** ADMIN: Create a user */
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/id/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find a user by id */
        get: operations["UserController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete a user by id */
        delete: operations["UserController_remove"];
        options?: never;
        head?: never;
        /** Update a user by id */
        patch: operations["UserController_update"];
        trace?: never;
    };
    "/user/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find a user by phone number */
        get: operations["UserController_findByPhone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all tickets */
        get: operations["TicketController_findAll"];
        put?: never;
        /** ADMIN: Create a ticket */
        post: operations["TicketController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search tickets */
        get: operations["TicketController_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/search-by-outbound-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search tickets by outbound flight time
         * @description Find tickets where outbound flight departs before or after a specified date
         */
        get: operations["TicketController_searchByOutboundTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tickets belonging to a user */
        get: operations["TicketController_findAllByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find a ticket by id */
        get: operations["TicketController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete a ticket */
        delete: operations["TicketController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update a ticket */
        patch: operations["TicketController_update"];
        trace?: never;
    };
    "/ticket/cancel/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cancel a ticket */
        patch: operations["TicketController_cancel"];
        trace?: never;
    };
    "/ticket/book/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Book a ticket */
        patch: operations["TicketController_bookTicket"];
        trace?: never;
    };
    "/ticket-passenger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all ticket-passengers */
        get: operations["TicketPassengerController_findAll"];
        put?: never;
        /** Create a ticket-passenger */
        post: operations["TicketPassengerController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-passenger/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find a ticket-passenger by id */
        get: operations["TicketPassengerController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete a ticket-passenger */
        delete: operations["TicketPassengerController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update a ticket-passenger */
        patch: operations["TicketPassengerController_update"];
        trace?: never;
    };
    "/flight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all flights */
        get: operations["FlightController_findAll"];
        put?: never;
        /** ADMIN: Create a flight */
        post: operations["FlightController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flight/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find a flight by id */
        get: operations["FlightController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete a flight */
        delete: operations["FlightController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update a flight */
        patch: operations["FlightController_update"];
        trace?: never;
    };
    "/airport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all airports */
        get: operations["AirportController_findAll"];
        put?: never;
        /** ADMIN: Create an airport */
        post: operations["AirportController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/airport/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find an airport by id */
        get: operations["AirportController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete an airport */
        delete: operations["AirportController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update an airport */
        patch: operations["AirportController_update"];
        trace?: never;
    };
    "/airplane": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Get all airplanes */
        get: operations["AirplaneController_findAll"];
        put?: never;
        /** ADMIN: Create an airplane */
        post: operations["AirplaneController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/airplane/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Find an airplane by id */
        get: operations["AirplaneController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete an airplane */
        delete: operations["AirplaneController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update an airplane */
        patch: operations["AirplaneController_update"];
        trace?: never;
    };
    "/article": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN: Returns all articles */
        get: operations["ArticleController_findAll"];
        put?: never;
        /** ADMIN: Create an article */
        post: operations["ArticleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/published": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all published articles */
        get: operations["ArticleController_findPublished"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get article by id */
        get: operations["ArticleController_findOne"];
        put?: never;
        post?: never;
        /** ADMIN: Delete article by id */
        delete: operations["ArticleController_remove"];
        options?: never;
        head?: never;
        /** ADMIN: Update article by id */
        patch: operations["ArticleController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: {
            /**
             * @description Full name of the user
             * @example Nguyễn Văn A
             */
            fullname: string;
            /**
             * @description Vietnam phone number
             * @example 0123456789
             */
            phone_number: string;
            /**
             * @description Email address
             * @example example@gmail.com
             */
            email: string;
            /**
             * @description Password with specific requirements
             * @example StrongP@ssw0rd!
             */
            password_hash: string;
            /**
             * @description User role
             * @default USER
             * @enum {string}
             */
            role: "ADMIN" | "USER";
            /**
             * Format: date
             * @description User's date of birth
             * @example 1990-01-01
             */
            birthday: string;
            /**
             * @description Gender of the user
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
        };
        User: Record<string, never>;
        UpdateUserDto: {
            /**
             * @description Full name of the user
             * @example Nguyễn Văn A
             */
            fullname?: string;
            /**
             * @description Vietnam phone number
             * @example 0123456789
             */
            phone_number?: string;
            /**
             * @description Email address
             * @example example@gmail.com
             */
            email?: string;
            /**
             * @description Password with specific requirements
             * @example StrongP@ssw0rd!
             */
            password_hash?: string;
            /**
             * @description User role
             * @default USER
             * @enum {string}
             */
            role: "ADMIN" | "USER";
            /**
             * Format: date
             * @description User's date of birth
             * @example 1990-01-01
             */
            birthday?: string;
            /**
             * @description Gender of the user
             * @enum {string}
             */
            gender?: "MALE" | "FEMALE";
        };
        LoginDto: {
            /**
             * @description phone number
             * @example 0123456789
             */
            phone_number: string;
            /**
             * @description password
             * @example StrongP@ssw0rd!
             */
            password: string;
        };
        RefreshTokenDto: {
            /**
             * @description Refresh token
             * @example eyJhbGci
             */
            refreshToken: string;
        };
        CreateTicketDto: {
            /**
             * @description Outbound flight ID
             * @example 1
             */
            outbound_flight_id: number;
            /**
             * @description Return flight ID
             * @example 1
             */
            return_flight_id: number;
            /**
             * @description User ID
             * @example 1
             */
            user_id: number;
            /**
             * Format: date-time
             * @description Booking date
             * @example 2021-12-31T23:59:59Z
             */
            booking_date: string;
            /**
             * @description Ticket type
             * @example ONE_WAY
             * @enum {string}
             */
            ticket_type: "ONE_WAY" | "ROUND_TRIP";
            /**
             * @description Booking class
             * @example ECONOMY
             * @enum {string}
             */
            booking_class: "ECONOMY" | "BUSINESS" | "FIRST_CLASS";
            /**
             * @description Booking seat code
             * @example A1
             */
            booking_seat_code: string;
            /**
             * @description Description
             * @example This is a ticket
             */
            description: string;
            /**
             * @description Total passengers
             * @example 1
             */
            total_passengers: number;
            /**
             * @description Base price
             * @example 100
             */
            base_price: string;
            /**
             * @description Booking status
             * @example CONFIRMED
             * @enum {string}
             */
            booking_status: "PENDING" | "CONFIRMED" | "CANCELLED";
        };
        BookTicketDto: {
            /**
             * @description Seat code for the booking
             * @example A12-B15
             */
            booking_seat_code: string;
            /**
             * @description Number of passengers
             * @example 2
             */
            total_passengers: number;
        };
        UpdateTicketDto: {
            /**
             * @description Outbound flight ID
             * @example 1
             */
            outbound_flight_id: number;
            /**
             * @description Return flight ID
             * @example 1
             */
            return_flight_id: number;
            /**
             * @description User ID
             * @example 1
             */
            user_id: number;
            /**
             * Format: date-time
             * @description Booking date
             * @example 2021-12-31T23:59:59Z
             */
            booking_date: string;
            /**
             * @description Ticket type
             * @example ONE_WAY
             * @enum {string}
             */
            ticket_type: "ONE_WAY" | "ROUND_TRIP";
            /**
             * @description Booking class
             * @example ECONOMY
             * @enum {string}
             */
            booking_class: "ECONOMY" | "BUSINESS" | "FIRST_CLASS";
            /**
             * @description Booking seat code
             * @example A1
             */
            booking_seat_code: string;
            /**
             * @description Description
             * @example This is a ticket
             */
            description: string;
            /**
             * @description Total passengers
             * @example 1
             */
            total_passengers: number;
            /**
             * @description Base price
             * @example 100
             */
            base_price: string;
            /**
             * @description Booking status
             * @example CONFIRMED
             * @enum {string}
             */
            booking_status: "PENDING" | "CONFIRMED" | "CANCELLED";
        };
        CreateTicketPassengerDto: {
            /**
             * @description Passenger type
             * @example ADULT
             * @enum {string}
             */
            passenger_type: "ADULT" | "CHILD" | "INFANT";
            /**
             * @description Associated adult ID
             * @example 1
             */
            associated_adult_id: number;
            /**
             * @description Ticket ID
             * @example 1
             */
            ticket_id: number;
            /**
             * @description Full name
             * @example John Doe
             */
            full_name: string;
            /**
             * Format: date-time
             * @description Birthday
             * @example 2021-12-31T23:59:59Z
             */
            birthday: string;
            /**
             * @description CCCD
             * @example 123456789
             */
            cccd: string;
            /**
             * @description Country code
             * @example VN
             */
            country_code: string;
        };
        UpdateTicketPassengerDto: {
            /**
             * @description Passenger type
             * @example ADULT
             * @enum {string}
             */
            passenger_type: "ADULT" | "CHILD" | "INFANT";
            /**
             * @description Associated adult ID
             * @example 1
             */
            associated_adult_id: number;
            /**
             * @description Ticket ID
             * @example 1
             */
            ticket_id: number;
            /**
             * @description Full name
             * @example John Doe
             */
            full_name: string;
            /**
             * Format: date-time
             * @description Birthday
             * @example 2021-12-31T23:59:59Z
             */
            birthday: string;
            /**
             * @description CCCD
             * @example 123456789
             */
            cccd: string;
            /**
             * @description Country code
             * @example VN
             */
            country_code: string;
        };
        CreateFlightDto: {
            /**
             * @description Departure airport ID
             * @example 1
             */
            departure_airport_id: number;
            /**
             * @description Arrival airport ID
             * @example 2
             */
            arrival_airport_id: number;
            /**
             * @description Airplane ID
             * @example 3
             */
            airplane_id: number;
            /**
             * @description Departure airport code
             * @example HAN
             */
            flight_number: string;
            /**
             * @description Base price
             * @example 1000000
             */
            base_price: string;
            /**
             * Format: date-time
             * @description Departure time
             * @example 2021-12-31T23:59:59Z
             */
            departure_time: string;
            /**
             * Format: date-time
             * @description Arrival time
             * @example 2021-12-31T23:59:59Z
             */
            arrival_time: string;
            /**
             * @description Flight duration
             * @example 1000000
             */
            duration: string;
            /**
             * @description Delay duration
             * @example 1000000
             */
            delay_duration: string;
        };
        UpdateFlightDto: {
            /**
             * @description Departure airport ID
             * @example 1
             */
            departure_airport_id: number;
            /**
             * @description Arrival airport ID
             * @example 2
             */
            arrival_airport_id: number;
            /**
             * @description Airline ID
             * @example 3
             */
            airline_id: number;
            /**
             * @description Departure airport code
             * @example HAN
             */
            flight_number: string;
            /**
             * @description Base price
             * @example 1000000
             */
            base_price: string;
            /**
             * Format: date-time
             * @description Departure time
             * @example 2021-12-31T23:59:59Z
             */
            departure_time: string;
            /**
             * Format: date-time
             * @description Arrival time
             * @example 2021-12-31T23:59:59Z
             */
            arrival_time: string;
            /**
             * @description Flight duration
             * @example 1000000
             */
            duration: string;
            /**
             * @description Delay duration
             * @example 1000000
             */
            delay_duration: string;
            /**
             * @description Flight status
             * @example SCHEDULED
             */
            status: string;
        };
        CreateAirportDto: {
            /**
             * @description The code of the airport
             * @example JFK
             */
            code: string;
            /**
             * @description The name of the airport
             * @example John F. Kennedy International Airport
             */
            name: string;
            /**
             * @description The city where the airport is located
             * @example New York
             */
            city: string;
            /**
             * @description The country where the airport is located
             * @example United States
             */
            country: string;
        };
        UpdateAirportDto: {
            /**
             * @description The code of the airport
             * @example JFK
             */
            code?: string;
            /**
             * @description The name of the airport
             * @example John F. Kennedy International Airport
             */
            name?: string;
            /**
             * @description The city where the airport is located
             * @example New York
             */
            city?: string;
            /**
             * @description The country where the airport is located
             * @example United States
             */
            country?: string;
        };
        CreateAirplaneDto: {
            /**
             * @description The name of the airplane model
             * @example Boeing 747
             */
            model_name: string;
            /**
             * @description The name of the manufacturer
             * @example Boeing
             */
            manufacturer: string;
            /**
             * @description The serial number of the airplane
             * @example 12345
             */
            serial_number: string;
            /**
             * @description The registration number of the airplane
             * @example N12345
             */
            registration_number: string;
            /**
             * @description The capacity of the airplane
             * @example 300
             */
            capacity: number;
            /**
             * @description The number of economy seats
             * @example 200
             */
            economy_seats: number;
            /**
             * @description The number of business seats
             * @example 100
             */
            business_seats: number;
            /**
             * @description The number of first class seats
             * @example 50
             */
            first_class_seats: number;
        };
        UpdateAirplaneDto: {
            /**
             * @description The name of the airplane model
             * @default Boeing 747
             */
            model_name: string;
            /**
             * @description The name of the manufacturer
             * @default Boeing
             */
            manufacturer: string;
            /**
             * @description The serial number of the airplane
             * @default 123456
             */
            serial_number: string;
            /**
             * @description The registration number of the airplane
             * @default N12345
             */
            registration_number: string;
            /**
             * @description The capacity of the airplane
             * @default 300
             */
            capacity: number;
            /**
             * @description The number of economy seats
             * @default 200
             */
            economy_seats: number;
            /**
             * @description The number of business seats
             * @default 50
             */
            business_seats: number;
            /**
             * @description The number of first class seats
             * @default 50
             */
            first_class_seats: number;
            /**
             * @description The status of the airplane
             * @example ACTIVE
             */
            status: string;
        };
        CreateArticleDto: {
            /**
             * @description The title of the article
             * @example How to create a NestJS application
             */
            title: string;
            /**
             * @description The description of the article
             * @example A step-by-step guide to create a NestJS application
             */
            description: string;
            /**
             * @description The content of the article
             * @example This is the content of the article
             */
            content: string;
            /**
             * @description The image URL of the article
             * @example https://example.com/image.jpg
             */
            image_url: string;
        };
        Article: Record<string, never>;
        UpdateArticleDto: {
            /**
             * @description The title of the article
             * @example How to create a NestJS application
             */
            title: string;
            /**
             * @description The description of the article
             * @example A step-by-step guide to create a NestJS application
             */
            description: string;
            /**
             * @description The content of the article
             * @example This is the content of the article
             */
            content: string;
            /**
             * @description The image URL of the article
             * @example https://example.com/image.jpg
             */
            image_url: string;
            /**
             * @description The status of the article
             * @example PUBLISHED
             */
            status: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all users. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description The user has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UserController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_findByPhone: {
        parameters: {
            query: {
                phone_number: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description User successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description User successfully logged in. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenDto"];
            };
        };
        responses: {
            /** @description Token successfully refreshed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully logged out. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the current user profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all tickets operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTicketDto"];
            };
        };
        responses: {
            /** @description Create a ticket operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The ticket has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_search: {
        parameters: {
            query: {
                /** @description Type of the ticket */
                ticket_type: "ONE_WAY" | "ROUND_TRIP";
                /** @description Code of the departure airport */
                departure_airport_code: string;
                /** @description Code of the arrival airport */
                arrival_airport_code: string;
                /** @description Departure date of the flight (YYYY-MM-DD) */
                outbound_day: string;
                /** @description Return date of the flight (YYYY-MM-DD) */
                return_day?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tickets have been successfully retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_searchByOutboundTime: {
        parameters: {
            query: {
                /** @description The reference date in YYYY-MM-DD format */
                date: string;
                /** @description If true, finds flights before the date. If false, finds flights after the date */
                before: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns tickets matching the time criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_findAllByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all tickets belonging to the specified user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No tickets found for this user. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find a ticket by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a ticket operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTicketDto"];
            };
        };
        responses: {
            /** @description Update a ticket operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cancel a ticket operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketController_bookTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookTicketDto"];
            };
        };
        responses: {
            /** @description Book a ticket operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid booking request or ticket already booked. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketPassengerController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all ticket-passengers operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketPassengerController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTicketPassengerDto"];
            };
        };
        responses: {
            /** @description The ticket-passenger has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketPassengerController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find a ticket-passenger by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketPassengerController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a ticket-passenger operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TicketPassengerController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTicketPassengerDto"];
            };
        };
        responses: {
            /** @description Update a ticket-passenger operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FlightController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all flights operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FlightController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFlightDto"];
            };
        };
        responses: {
            /** @description Create a flight operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FlightController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find a flight by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FlightController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a flight operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FlightController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFlightDto"];
            };
        };
        responses: {
            /** @description Update a flight operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirportController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all airports operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirportController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAirportDto"];
            };
        };
        responses: {
            /** @description Create an airport operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirportController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find an airport by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirportController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an airport operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirportController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAirportDto"];
            };
        };
        responses: {
            /** @description Update an airport operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirplaneController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all airplanes operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirplaneController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAirplaneDto"];
            };
        };
        responses: {
            /** @description Create an airplane operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirplaneController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find an airplane by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirplaneController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an airplane operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AirplaneController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAirplaneDto"];
            };
        };
        responses: {
            /** @description Update an airplane operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all articles operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArticleDto"];
            };
        };
        responses: {
            /** @description Create an article operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_findPublished: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all published articles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Article"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a single article */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Article"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Article not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete article by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArticleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArticleDto"];
            };
        };
        responses: {
            /** @description Update article by id operation completed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
